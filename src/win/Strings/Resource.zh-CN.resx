<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="autoOverwrite" xml:space="preserve">
    <value>自动覆盖文件</value>
  </data>
  <data name="clear" xml:space="preserve">
    <value>清空</value>
  </data>
  <data name="clientIp" xml:space="preserve">
    <value>当前IP：</value>
  </data>
  <data name="clientIpError" xml:space="preserve">
    <value>本机ip或端口错误</value>
  </data>
  <data name="clientPort" xml:space="preserve">
    <value>监听端口：</value>
  </data>
  <data name="countLabel" xml:space="preserve">
    <value>连接数：</value>
  </data>
  <data name="linkTo" xml:space="preserve">
    <value>请求连接</value>
  </data>
  <data name="listen" xml:space="preserve">
    <value>监听</value>
  </data>
  <data name="listenNotOpen" xml:space="preserve">
    <value>监听模式没有开启</value>
  </data>
  <data name="messageTip" xml:space="preserve">
    <value>成功{0}/失败{1}/共{2}</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>文件名</value>
  </data>
  <data name="overwriteTip" xml:space="preserve">
    <value>遇见重名文件自动覆盖或跳过</value>
  </data>
  <data name="path" xml:space="preserve">
    <value>文件路径</value>
  </data>
  <data name="pick" xml:space="preserve">
    <value>选择</value>
  </data>
  <data name="pickFile" xml:space="preserve">
    <value>选择文件</value>
  </data>
  <data name="pickFolder" xml:space="preserve">
    <value>选择文件夹</value>
  </data>
  <data name="pickSaveFolderTip" xml:space="preserve">
    <value>请选择保存文件夹</value>
  </data>
  <data name="progress" xml:space="preserve">
    <value>进度</value>
  </data>
  <data name="ReadyReceive" xml:space="preserve">
    <value>准备接收</value>
  </data>
  <data name="ReadySend" xml:space="preserve">
    <value>准备发送</value>
  </data>
  <data name="Received" xml:space="preserve">
    <value>接收成功</value>
  </data>
  <data name="ReceiveFailure" xml:space="preserve">
    <value>接收失败</value>
  </data>
  <data name="ReceiveIgnore" xml:space="preserve">
    <value>接收跳过</value>
  </data>
  <data name="receiveLabel" xml:space="preserve">
    <value>接收:</value>
  </data>
  <data name="Receiving" xml:space="preserve">
    <value>接收中</value>
  </data>
  <data name="receivingTip" xml:space="preserve">
    <value>接收中...</value>
  </data>
  <data name="remoteIp" xml:space="preserve">
    <value>目标IP：</value>
  </data>
  <data name="remoteIpError" xml:space="preserve">
    <value>目标IP地址不正确</value>
  </data>
  <data name="remotePort" xml:space="preserve">
    <value>目标端口：</value>
  </data>
  <data name="saveFolder" xml:space="preserve">
    <value>保存文件夹：</value>
  </data>
  <data name="SendFailure" xml:space="preserve">
    <value>发送失败</value>
  </data>
  <data name="SendIgnore" xml:space="preserve">
    <value>发送跳过</value>
  </data>
  <data name="Sending" xml:space="preserve">
    <value>发送中</value>
  </data>
  <data name="sendLabel" xml:space="preserve">
    <value>发送:</value>
  </data>
  <data name="Sent" xml:space="preserve">
    <value>发送成功</value>
  </data>
  <data name="size" xml:space="preserve">
    <value>总长度</value>
  </data>
  <data name="speed" xml:space="preserve">
    <value>传输速度</value>
  </data>
  <data name="status" xml:space="preserve">
    <value>状态</value>
  </data>
  <data name="toggle" xml:space="preserve">
    <value>切换</value>
  </data>
  <data name="toggleTip" xml:space="preserve">
    <value>切换为被动模式</value>
  </data>
  <data name="toggleToTip" xml:space="preserve">
    <value>切换为主动模式</value>
  </data>
</root>